// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials provider
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // User preferences
  preferences   Json?     @default("{}")
  
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  bookmarks     Bookmark[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  TRANSCRIBING
  ANALYZING
  COMPLETED
  FAILED
}

model Video {
  id            String      @id @default(cuid())
  title         String
  description   String?
  fileName      String
  filePath      String
  fileSize      BigInt
  duration      Float?      // in seconds
  thumbnailPath String?
  mimeType      String
  status        VideoStatus @default(UPLOADING)
  metadata      Json?       // stores additional video metadata
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  // Relationships
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  transcript    Transcript?
  highlights    Highlight[]
  bookmarks     Bookmark[]
  
  @@map("videos")
}

model Transcript {
  id        String   @id @default(cuid())
  content   String   @db.Text // Full transcript text
  language  String?  @default("en")
  confidence Float?  // Overall confidence score
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationships
  videoId   String   @unique
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  segments  TranscriptSegment[]
  
  @@map("transcripts")
}

model TranscriptSegment {
  id         String  @id @default(cuid())
  text       String  @db.Text
  startTime  Float   // in seconds
  endTime    Float   // in seconds
  speaker    String? // speaker identification
  confidence Float?  // confidence score for this segment
  
  createdAt  DateTime @default(now())
  
  // Relationships
  transcriptId String
  transcript   Transcript @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
  
  // embedding    Embedding? // Disabled for initial setup
  
  @@map("transcript_segments")
}

// Disabled for initial setup - will enable in Phase 2
// model Embedding {
//   id        String                     @id @default(cuid())
//   vector    Unsupported("vector(1536)") // OpenAI embedding dimension
//   
//   createdAt DateTime @default(now())
//   
//   // Relationships
//   segmentId String             @unique
//   segment   TranscriptSegment  @relation(fields: [segmentId], references: [id], onDelete: Cascade)
//   
//   @@map("embeddings")
// }

enum HighlightType {
  AI_GENERATED
  USER_CREATED
  QUESTION
  KEY_POINT
  SPEAKER_CHANGE
  TOPIC_TRANSITION
}

model Highlight {
  id          String        @id @default(cuid())
  title       String
  description String?
  startTime   Float         // in seconds
  endTime     Float         // in seconds
  type        HighlightType
  score       Float?        // AI confidence/importance score
  tags        String[]      // searchable tags
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relationships
  videoId     String
  video       Video         @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@map("highlights")
}

model Bookmark {
  id          String   @id @default(cuid())
  title       String
  description String?
  timestamp   Float    // in seconds
  tags        String[] // user-defined tags
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  videoId     String
  video       Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("bookmarks")
}

// AI Response Caching System
model AICache {
  id          String   @id @default(cuid())
  type        String   // 'transcription', 'highlights', 'summary', 'embeddings'
  inputHash   String   @unique // Hash of input content
  response    Json     // Cached AI response
  model       String   // AI model used (e.g., 'whisper-1', 'gpt-4o-mini')
  inputSize   Int?     // Size of input (for cost estimation)
  outputSize  Int?     // Size of output (for cost estimation)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  expiresAt   DateTime? // Optional expiration date
  hitCount    Int      @default(0) // Number of times this cache entry was used
  
  @@index([type, inputHash])
  @@index([expiresAt])
  @@map("ai_cache")
}

// API Usage Tracking for Cost Monitoring
model APIUsage {
  id            String   @id @default(cuid())
  type          String   // 'transcription', 'completion', 'embedding'
  model         String   // AI model used
  inputTokens   Int?     // Number of input tokens (for text models)
  outputTokens  Int?     // Number of output tokens (for text models)
  inputMinutes  Float?   // Duration for audio models (Whisper)
  estimatedCost Float?   // Estimated cost in USD
  cached        Boolean  @default(false) // Whether result was served from cache
  
  timestamp     DateTime @default(now())
  
  // Optional relationships
  videoId       String?
  userId        String?
  
  @@index([timestamp, type])
  @@index([videoId])
  @@index([userId])
  @@map("api_usage")
}
